[{"catalog":"about","date":"2017-04-05T04:04:25+08:00","location":"关于/我","summary":"本博客，也是MdRest的引擎创建，你也可以将它当作mdrest示例。 关于我 github: https://github.com/ti","title":"又一个程序员的一亩三分地\n","truncated":false},{"date":"2017-04-05T03:30:57+08:00","location":"readme","summary":"采用 MdRest 引擎编写, 编辑文章到 master 分之，十分钟就会被更新一次。","title":"个人博客\n","truncated":false},{"catalog":"projects","date":"2017-03-04T00:00:00Z","github":"https://github.com/ti/mdrest","link":"http://nanxi.li","location":"项目/mdrest","summary":"从Markdown建站，几乎成了整个技术圈博客标配，但是Markdown的技术存在很多限制，搜索下目前Markdown博客引擎你会发现，所有的博客引擎定制化不是","tags":["golang","博客","markdown"],"title":"MdRest 关于Markdown博客，你所期望的都在这里\n","truncated":true},{"author":"思晴","date":"2017-03-01T00:00:00Z","location":"设计/不存在的“白”","summary":"1、‘白’这样的东西是不存在的 漂白的骨头让我们与死亡相连，但奶和蛋的白，又对我们述说着生命，衣服的白，又让我们感觉到了温暖与舒适。母乳的哺育对所有的哺乳动物来说","tags":["设计"],"title":"不存在的“白”\n","truncated":true},{"author":"思晴","date":"2017-02-21T00:00:00Z","location":"设计/读懂《设计的觉醒》","picture":"/设计/img/设计的觉醒.jpg","summary":"《设计的觉醒》作者田中一光用平实的语言向我们娓娓道说了他这一生设计思考的觉醒过程。 田中一光， 是日本著名的设计师，是平面设计领域的教父级人物， 在书中我们可以详尽的","tags":["设计","日本"],"title":"读懂《设计的觉醒》\n","truncated":true},{"catalog":"projects","date":"2016-09-04T00:00:00Z","github":"https://github.com/ti/ctxrouter","link":"https://github.com/ti/ctxrouter","location":"项目/context_router","summary":"GitHub: https://github.com/ti/ctxrouter Features Context Append on Current Function Best Performance (no regexp match) Wildcards Router Support (PathPrefix) Decode request body before business layer (JSON, xml or other) Decode request url before business layer Zero Garbage Examples Basic Example package main import ( \u0026quot;github.com/ti/ctxrouter\u0026quot; \u0026quot;net/http\u0026quot; \u0026quot;strconv\u0026quot; ) //context style func (ctx *Context) Hello(id string) { //ctx.Request ... ctx.Writer.Write([]byte(\u0026quot;hello \u0026quot; + id)) } //normal style func NormalHello(w http.ResponseWriter, r *http.Request) { w.Write([]byte(\u0026quot;hello \u0026quot; + ctxrouter.Params(r)[0])) } //func style func Hello(ctx *ctxrouter.Context, name","tags":["golang","router"],"title":"CtxRouter A High performance HTTP request router with Context\n","truncated":true},{"catalog":"projects","date":"2016-02-04T00:00:00Z","github":"https://github.com/ti/nasync","link":"https://github.com/ti/nasync","location":"项目/nasync","summary":"a customizable async task pool for golang, (event bus, runtime) github: https://github.com/ti/nasync Fetures less memory more effective max gorutines and memory customizable more safe Simple Usage nasync.Do(function) Advanced Usage go get github.com/ti/nasync import \u0026quot;github.com/ti/nasync\u0026quot; func main() { //new a async pool in max 1000 task in max 1000 gorutines async := nasync.New(1000,1000) defer async.Close() async.Do(doSometing,\u0026quot;hello word\u0026quot;) nasync.Do(func() { http.Get(\u0026quot;https://github.com/ti/\u0026quot;) }) } func doSometing(msg string) string{ return \u0026quot;i am done by \u0026quot; + msg } WHY golang is something easy but","tags":["golang"],"title":"NASYNC \n","truncated":true},{"author":"Winwill","author_url":"http://qifuguang.me/","date":"2015-01-28T00:00:00Z","location":"开发/redis事务介绍","summary":"写在前面：一般情况下，我们不建议将数据可用性内容放在redis中进行操作，例如转账，关系建立等，redis被认为是一个较不可靠的数据库，一般用作数据缓存，pub","tags":["redis"],"title":"Redis事务介绍\n","truncated":true},{"author":"初一七月","date":"2013-01-28T00:00:00Z","location":"开发/redis高并发问题","summary":"Redis为单进程单线程模式，采用队列模式将并发访问变为串行访问。Redis本身没有锁的概念，Redis对于多个客户端连接并不存在竞争，但是在Jedis客户端对","tags":["redis"],"title":"Redis并发问题\n","truncated":true},{"author":"张洋","author_url":"http://blog.codinglabs.org/articles/theory-of-mysql-index.html","date":"2011-10-18T00:00:00Z","location":"开发/mysql索引背后的数据结构及算法原理","summary":"MySQL索引背后的数据结构及算法原理 本文以MySQL数据库为研究对象，讨论与数据库索引相关的一些话题。特别需要说明的是，MySQL支持诸多存储引擎，而各种存储","tags":["mysql","算法"],"title":"MySQL索引背后的数据结构及算法原理","truncated":true}]